import java.util.PriorityQueue;
import java.util.concurrent.atomic.AtomicLong;

class Request {
    String data;

    public Request(String data) {
        this.data = data;
    }

    @Override
    public String toString() {
        return data;
    }
}

class InMemoryPriorityQueue {
    private static class QueueElement implements Comparable<QueueElement> {
        int priority;
        long timestamp; // For FCFS within same priority
        Request request;

        public QueueElement(int priority, long timestamp, Request request) {
            this.priority = priority;
            this.timestamp = timestamp;
            this.request = request;
        }

        @Override
        public int compareTo(QueueElement other) {
            if (this.priority == other.priority) {
                return Long.compare(this.timestamp, other.timestamp); // FCFS
            }
            return Integer.compare(this.priority, other.priority); // Priority
        }
    }

    private PriorityQueue<QueueElement> queue;
    private AtomicLong counter; // To generate FCFS timestamp

    public InMemoryPriorityQueue() {
        queue = new PriorityQueue<>();
        counter = new AtomicLong();
    }

    public void add(Request request, int priority) {
        queue.add(new QueueElement(priority, counter.incrementAndGet(), request));
    }

    public Request poll() {
        QueueElement element = queue.poll();
        return (element != null) ? element.request : null;
    }

    public int size() {
        return queue.size();
    }

    public boolean isEmpty() {
        return queue.isEmpty();
    }
}
